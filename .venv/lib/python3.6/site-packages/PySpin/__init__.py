import random

AcquisitionMode_Continuous = 0
BinningHorizontalMode_Average = 1
BinningSelector_All = 0
BinningVerticalMode_Average = 1
ExposureMode_Timed = 0
PixelFormat_BGR8 = 27
RO = 3
RW = 4
TriggerMode_Off = 0
TriggerMode_On = 1
TriggerSelector_FrameStart = 1
TriggerSource_Software = 0
WO = 2
UserSetSelector_Default = 0
BalanceWhiteAuto_Off = 0
GainAuto_Off = 0
ExposureAuto_Off = 0
BinningHorizontalMode_Sum = 2
BinningVerticalMode_Sum = 2


class CamList:
    def __init__(self):
        self.__map = {
            "good-serial": Camera(),
        }

    def __iter__(self):
        return iter(self.__map.values())

    def Clear(self):
        self.__map.clear()

    def GetBySerial(self, serial):
        return self.__map[serial]


class TLDevice:
    def __init__(self, serial_number):
        self.DeviceSerialNumber = Node("DeviceSerialNumber", serial_number, access_mode=RO)


class Camera:
    def __init__(self):
        self.__init_count = 0
        self.TLDevice = TLDevice("good-serial")
        self.__nodes = {
            "Width": Node("Width", 720, access_mode=RO),
            "Height": Node("Height", 540, access_mode=RO),
            "BinningHorizontalMode": Node("BinningHorizontalMode", access_mode=RW),
            "BinningHorizontal": Node("BinningHorizontal", access_mode=RW),
            "BinningVerticalMode": Node("BinningVerticalMode", access_mode=RW),
            "BinningVertical": Node("BinningVertical", access_mode=RW),
            "BinningSelector": Node("BinningSelector", access_mode=RW),
            "PixelFormat": Node("PixelFormat", access_mode=RW),
            "BalanceWhiteAuto": Node("BalanceWhiteAuto", access_mode=RW),
            "GainAuto": Node("GainAuto", access_mode=RW),
            "ExposureAuto": Node("ExposureAuto", access_mode=RW),
            "Gain": Node("Gain", access_mode=RW),
            "ExposureMode": Node("ExposureMode", access_mode=RW),
            "ExposureTime": Node("ExposureTime", access_mode=RW),
            "TriggerMode": Node("TriggerMode", access_mode=RW),
            "TriggerSource": Node("TriggerSource", access_mode=RW),
            "TriggerSelector": Node("TriggerSelector", access_mode=RW),
            "AcquisitionMode": Node("AcquisitionMode", access_mode=RW),
            "UserSetSelector": Node("UserSetSelector", access_mode=RW),
            "DeviceTemperatureSelector": Node("DeviceTemperatureSelector", "CORE_BOARD", access_mode=RW),
            "DeviceTemperature": Node("DeviceTemperature", round(random.uniform(20, 50), 2), access_mode=RO),
            "UserSetLoad": Node("UserSetLoad", is_callable=True),
        }

    def BeginAcquisition(self):
        pass

    def EndAcquisition(self):
        pass

    def _get_init_count(self):
        return self.__init_count

    def Init(self):
        self.__init_count += 1

    def DeInit(self):
        self.__init_count -= 1

    def __getattr__(self, item):
        return self.__nodes.setdefault(item, Node(item))


class System:
    counter = 0

    @classmethod
    def GetInstance(cls):
        cls.counter += 1
        return cls()

    @classmethod
    def ReleaseInstance(cls):
        cls.counter -= 1

    def GetCameras(self):
        return CamList()


class Node:
    not_set = object()

    def __init__(self, name, value=not_set, access_mode=not_set, is_callable=False):
        self.__name = name
        self.__value = value
        self.__access_mode = access_mode
        self.__is_callable = is_callable
        self.__call_count = 0
        self.__get_count = 0
        self.__set_count = 0

    def __str__(self):
        return f"Node '{self.__name}'"

    def GetValue(self):
        assert self.__access_mode in (RO, RW)
        assert self.__value is not self.not_set, f"{self} value not set"
        self.__get_count += 1
        return self.__value

    def _get_get_count(self):
        return self.__get_count

    def SetValue(self, value):
        assert self.__access_mode in (RW, WO)
        self.__set_count += 1
        self.__value = value

    def _get_set_count(self):
        return self.__set_count

    def GetAccessMode(self):
        assert self.__access_mode is not self.not_set, f"{self} access_mode not set"
        return self.__access_mode

    def Execute(self):
        if not self.__is_callable:
            raise TypeError(f"'{self.__class__.__name__}' object '{self.__name}' is not callable")
        self.__call_count += 1

    def _get_call_count(self):
        return self.__call_count
