"""
Mock of Ximea Camera

Will be called by micropsi-worlds/devices/cameras/ximea.py
"""

__author__ = "arthur"
__date__ = "31.07.2020"

import numpy
import random
from PIL import Image as PIL_Image
from PIL import ImageEnhance
from pathlib import Path

class Image:

    def __init__(self):
        self.numpy_image = numpy.ndarray(0)

    def configure(self, color, width, height):
        self.color = color
        self.width = width
        self.height = height

    def get_image_data_numpy(self):
        return self.numpy_image

class Camera:

    @classmethod
    def increment_devices_counter(cls):
        pass

    @classmethod
    def decrement_device_counter(cls):
        pass

    def _mock_image(self):
        p = Path(__file__)
        raccoon_path = p.parent / "raccoon.jpg"
        trash_path = p.parent / "garbage.jpg"

        if self.device_id % 2 == 0:
            path = raccoon_path
        else:
            path = trash_path

        img = PIL_Image.open(path)

        img = img.resize((self.width, self.height))
        return img

    def __init__(self, device_id=0, *, w=None, h=None):
        self.device_id = device_id
        self.handle = 0
        self.color = True
        self.gain = 5
        self.exposure = 5000
        # I got width and height from "Manage Devices" in MESH.
        # This is (probably) not what ximea returns, but this should work.
        self.width = 320 if w is None else w
        self.height = 256 if h is None else h
        self.mock_image = self._mock_image()
        self.rotation = 0
        self.__device_sn = str(1234567 + device_id).encode()
        self.XI_TEMP_SELECTOR = 'XI_TEMP_SENSOR_BOARD' # Default temperature sensor selector.

    def make_honk_image(self):
        """
        This will generate an image that looks like old TV noise and reacts to gain
        and exposure if color is enabled. If color is false, it's just black.
        """
        if self.color:
            self.rotation -= 1
            # rotate
            if self.device_id % 2 == 0:
                rotation = self.rotation
            else:
                rotation = -1 * self.rotation
            img = self.mock_image.rotate(rotation)
            # enhance
            enhance_factor = (self.gain/5 + self.exposure/5000) / 2
            enhancer = ImageEnhance.Brightness(img)
            img = enhancer.enhance(enhance_factor)
            # ndarray
            data = numpy.asarray(img)[:,:,[2,1,0]]
        else:
            data = numpy.zeros((self.width, self.height, 3))
        return data

    def get_image(self, image) -> None:
        """
        Pass the image to update it. Weird, yes.

        Example:
        self.cam.get_image(self.img)
        img = self.img.get_image_data_numpy()
        """
        if not isinstance(image, Image):
            raise TypeError("image must be instance of Image")
        image.numpy_image = self.make_honk_image()

    def get_number_devices(self):
        """
        If this return 0, means there is no camera connected
        """
        return 2

    def open_device(self):
        """
        It returns nothing and does things that I probably don't have to mock
        """
        pass

    def open_device_by_SN(self, serial_number):
        """
        It returns nothing and does things that I probably don't have to mock
        """
        pass

    def get_width(self):
        """
        This is never set, just read (at least from the ximea.py perspective)
        """
        return self.width

    def get_height(self):
        """
        This is never set, just read (at least from the ximea.py perspective)
        """
        return self.height
    
    def set_debug_level(self, level):
        """
        We set it to disabled, so it seems irrelevant
        """
        pass

    def set_downsampling(self, dwn_type):
        """
        This doesn't have to work if we have the width and height set as I did in init.
        """
        pass

    def set_downsampling_type(self, dwn_type):
        """
        This doesn't have to work if we have the width and height set as I did in init.
        """
        pass

    def set_imgdataformat(self, data_format):
        """
        Selecting if we want color or not.

        if self.mode != 'color':
            self.cam.set_imgdataformat('XI_MONO8')
        else:
            self.cam.set_imgdataformat('XI_RGB24')
        """
        formats = {'color': 'XI_RGB24', 'bew': 'XI_MONO8'}
        # TODO make sure our mock data has color or not!
        if data_format == formats['bew']:
            self.color = False
        elif data_format == formats['color']:
            self.color = True
        else:
            raise ValueError("'{}' is not one of: {}".format(data_format, ', '.join(formats.values())))

    def set_exposure(self, val):
        """
        This could influence the mock image we send back. Is this relevant?
        """
        self.exposure = val

    def set_gain(self, val):
        """
        This could influence the mock image we send back. Is this relevant?
        """
        self.gain = val

    def get_exposure(self):
        return self.exposure

    def get_gain(self):
        return self.gain

    def set_trigger_source(self, source):
        """
        Seems to be some kinda of camera initialization that can be ignored.
        """
        pass
    def set_trigger_software(self, number):
        """
        I can't figure out what that number means, but it's an int (1) in the Runtime.
        """
        pass

    def enable_recent_frame(self):
        """
        Seems to be some kinda of camera initialization that can be ignored.
        """
        pass

    def start_acquisition(self):
        """
        Seems to turn the camera "on". We don't need that to send mock images.
        """
        pass

    def stop_acquisition(self):
        """
        Seems to turn the camera "off". We don't need that to send mock images.
        """
        pass

    def close_device(self):
        """
        Seems to turn the camera even more off than stop acquisition. Can be ignored.
        """
        pass

    def get_param(self, param_name, type_hint=None):
        """
        Return the param requested by name.
        Currently we only use this for getting the serial number.
        Add other cases as necessary.
        """
        dummy_params = {
            "device_sn": self.__device_sn,
        }
        param = dummy_params[param_name]
        if type_hint:
            param = type_hint(param)
        return param
    
    def set_temp_selector(self, temp_selector):
        """
        Set camera temperature sensor selector.
        """
        self.XI_TEMP_SELECTOR = temp_selector

    def get_temp_selector(self):
        """
        Return camera temperature sensor selector.
        """
        return self.XI_TEMP_SELECTOR

    def get_temp(self):
        """
        Mock camera operating temperature (under 50 C).
        """
        return round(random.uniform(20, 50), 2)
