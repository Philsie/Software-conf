"""
Simple 3D plot example
"""
import sys
import numpy as np
from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.widgets import Button, TextBox
from datalogging.plotting_base import MatplotlibListener

class Vector3DPlot(MatplotlibListener):

    def __init__(self, *args, equal_aspect=True, **kwargs):
        self.equal_aspect = equal_aspect
        super().__init__(*args, **kwargs)

    def prepare_data(self, data, timestamps, messages, steps):
        """
        This Listener assumes that the payload of each log call is
        a 1D vector of length at least 3, and it ignores dimensions >= 3.
        """

        # TODO: accept multiple 3D timeseries in the same plot? like,
        # """
        # This Listener assumes that the payload of each log call is
        # a 1D vector of length exactly 3, or a list of such vectors,
        # or a string-keyed dict of such vectors (the keys then form
        # the legend labels).
        # """

        data = np.array(data)[:, 0:3]
        return data, messages[-1]

    def create_figure(self, data, message):
        figure = plt.figure(figsize=(7,4))
        self.ax = figure.add_subplot(projection='3d')
        self.ax.view_init(elev=25, azim=35)
        self.buttons = []
        self.paused = False
        self.wobble = True

        paus_bt_ax = plt.axes([0.8, 0.9, 0.2, 0.1])
        pause_button = Button(paus_bt_ax, 'pause', color='0.1', hovercolor='0.2')

        def toggle_pause(event, button=pause_button):
            self.paused = not self.paused
            button.label.set_text('continue' if self.paused else 'pause')

        pause_button.on_clicked(toggle_pause)
        self.buttons.append(pause_button)

        wobble_bt_ax = plt.axes([0.1, 0.9, 0.15, 0.1])
        wobble_button = Button(wobble_bt_ax, 'stop wobblin', color='0.1', hovercolor='0.2')

        def toggle_wobble(event, button=wobble_button):
            self.wobble = not self.wobble
            button.label.set_text('stop wobblin' if self.wobble else 'do wobble')

        wobble_button.on_clicked(toggle_wobble)
        self.buttons.append(wobble_button)


        def set_hist(text):
            if text:
                length = int(text)
                self.len_history = length * 3  # TODO len_history should be a method of the base class otherwise it's confusing
                self.len_visible_history = length

        set_hist("100") # TODO don't do this

        hist_textbox_ax = plt.axes([0.44, 0.01, 0.1, 0.05])
        hist_textbox = TextBox(hist_textbox_ax, 'history (steps) ',
                                initial=str(self.len_visible_history), color='0.2', hovercolor='0.4')
        hist_textbox.on_submit(set_hist)
        self.hist_textbox = hist_textbox

        self.ax.set_xlabel('X')
        self.ax.set_ylabel('Y')
        self.ax.set_zlabel('Z')
        self.ax.w_xaxis.pane.set_color((0.1,0.1, 0.1))
        self.ax.w_yaxis.pane.set_color((0.1,0.1, 0.1))
        self.ax.w_zaxis.pane.set_color((0.1,0.1, 0.1))

        self.color = np.array([1.0, 0.5, 0.055])

        self.sc_x, = self.ax.plot(data[:, 1], data[:, 2], zs=0,  zdir='x',  color=self.color, linestyle='-', alpha=0.2, linewidth=2)
        self.sc_y, = self.ax.plot(data[:, 0], data[:, 2], zs=0,  zdir='y',  color=self.color, linestyle='-', alpha=0.2, linewidth=2)
        self.sc_z, = self.ax.plot(data[:, 0], data[:, 1], zs=0,  zdir='z',  color=self.color, linestyle='-', alpha=0.2, linewidth=2)

        self.line3d, = self.ax.plot(data[:, 0], data[:, 1], data[:, 2], color=self.color, linestyle='-', linewidth=2, alpha=0.8)
        self.sc3d = self.ax.scatter(data[:, 0], data[:, 1], data[:, 2], color=self.color, marker='o', s=8, picker=5, alpha=1)

        self.sc3d.set_depthshade(True)


        self.update_counter = 0
        return figure

    def update_figure(self, figure, data, message):
        if self.paused:
            return

        plt.suptitle(message)

        data_all = data[-self.len_history:]

        if self.equal_aspect:
            all_min, all_max = np.min(data_all), np.max(data_all)
            xmin = ymin = zmin = all_min
            xmax = ymax = zmax = all_max
            self.ax.set_box_aspect((xmax-xmin, ymax-ymin, zmax-ymin))
        else:
            xmin = np.min(data_all[:, 0])
            xmax = np.max(data_all[:, 0])
            ymin = np.min(data_all[:, 1])
            ymax = np.max(data_all[:, 1])
            zmin = np.min(data_all[:, 2])
            zmax = np.max(data_all[:, 2])

        self.ax.set_xlim(xmin, xmax)
        self.ax.set_ylim(ymin, ymax)
        self.ax.set_zlim(zmin, zmax)

        data = data[-self.len_visible_history:]

        self.line3d.set_data(data[:, 0], data[:, 1])
        self.line3d.set_3d_properties(data[:, 2])

        self.sc3d._offsets3d = (data[:, 0], data[:, 1], data[:, 2])

        colorfade = np.tile(self.color, (data.shape[0], 1))
        colorfade *= np.atleast_2d(np.linspace(0, 1, data.shape[0])).T
        self.sc3d.set_facecolors(colorfade)
        self.sc3d.set_edgecolors(colorfade)

        self.sc_x.set_data(data[:, 1], data[:, 2])
        self.sc_x.set_3d_properties(xmin, zdir='x')

        self.sc_y.set_data(data[:, 0], data[:, 2])
        self.sc_y.set_3d_properties(ymin, zdir='y')

        self.sc_z.set_data(data[:, 0], data[:, 1])
        self.sc_z.set_3d_properties(zmin, zdir='z')

        if self.wobble:
            self.ax.view_init(elev=self.ax.elev + 0.1 * np.cos(self.update_counter * 0.066),
                              azim=self.ax.azim + 1 * np.sin(self.update_counter * 0.066))
        self.update_counter += 1

if __name__ == '__main__':
    import stackprinter
    stackprinter.set_excepthook()
    try:
        port = int(sys.argv[1])
    except Exception as e:
        print(e)
        print('\nUsage example:\n"python plot_listener.py 15001"')
    else:
        plotter = Vector3DPlot(port=port)
        plotter.start()
