"""
Listen for one or more image arrays & plot them
"""

import sys
import numpy as np

from collections import OrderedDict
from matplotlib import pyplot as plt

from datalogging.plotting_base import MatplotlibListener


def imshow_dimshuffle(image, *args, ax=None, existing_imshow_instance=None, **kwargs):
    """ version of imshow that also accepts color channels in the first dimension """
    if image.ndim == 2:
        mpl_image = image
    elif image.ndim == 3 and np.argmin(image.shape) == 2:
        mpl_image = image

    elif image.ndim == 3 and np.argmin(image.shape) == 0:
        mpl_image = image.transpose(1, 2, 0)

    else:
        raise Exception("This array does not look like an image. shape: %s" % image.shape)

    if ax is None:
        ax = plt.gca()

    if existing_imshow_instance is not None:
        existing_imshow_instance.set_data(mpl_image)
    else:
        existing_imshow_instance = ax.imshow(mpl_image, *args, **kwargs)

    return existing_imshow_instance


class Imshow(MatplotlibListener):
    """ Display one or more live images """
    def prepare_data(self, data, timestamps, messages, steps):
        """
        This listener assumes that the payload of each log call is
        either a np array of shape WxH or WxHx3, or a list of such
        arrays, or a string-keyed dict of such arrays (displayed as labels).
        """
        msg = messages[-1]
        step = steps[-1]
        data = data[-1]

        if isinstance(data, np.ndarray):
            data = {'': data}
        elif isinstance(data, list):
            data = {str(idx): arr for idx, arr in enumerate(data)}

        assert isinstance(data, dict)

        for key, arr in data.items():
            assert isinstance(key, str)
            assert isinstance(arr, np.ndarray)
            assert arr.ndim in (2, 3), "expected WxH or WxHxC array"

        return data, msg, step

    def create_figure(self, data, latest_msg, latest_step):
        n_imgs = len(data)
        n_rows = np.round(np.sqrt(n_imgs)).astype(int)
        n_cols = np.ceil(n_imgs / n_rows).astype(int)

        figure = plt.figure(figsize=(4 * n_cols, 4 * n_rows))
        plt.suptitle("%s [%s]" % (latest_msg, latest_step))

        self.imshow_instances = {}
        keys = list(data.keys())
        if not isinstance(data, OrderedDict):
            keys = sorted(keys)
        for idx, name in enumerate(keys):
            arr = data[name]
            ax = plt.subplot(n_rows, n_cols, idx + 1)
            imsh = imshow_dimshuffle(arr, ax=ax)
            self.imshow_instances[name] = imsh
            plt.title(name)

        return figure

    def update_figure(self, figure, data, latest_msg, latest_step):
        plt.suptitle("%s [%s]" % (latest_msg, latest_step))

        fields_changed = set(data.keys()) != set(self.imshow_instances.keys())
        if fields_changed:
            raise ValueError("Can't deal with changing fields (yet), restart this plotter")
        for name, imshow in self.imshow_instances.items():
            imshow_dimshuffle(data[name], existing_imshow_instance=imshow)


if __name__ == '__main__':
    import logging
    logging.basicConfig(level=logging.INFO)

    import stackprinter
    stackprinter.set_excepthook()
    try:
        port = int(sys.argv[1])
    except Exception as e:
        print(e)
        print('\nUsage example:\n"python imshow.py 15001"')
    else:
        plotter = Imshow(port=port)
        plotter.start()
